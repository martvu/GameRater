type User {
  _id: String
  username: String
  favorites: [Game]
  reviews: [Review]
}

type Review {
  _id: String
  user: String
  title: String
  content: String
  rating: Int
  platform: String
  gameID: String
}

type Reviews {
  reviews: [Review]
  count: Int!
  userHasReviewed: Boolean!
}

type Game {
  _id: String
  id: Int
  name: String
  summary: String
  genres: [Genre]
  platforms: [Platform]
  first_release_date: String
  cover_image_id: String
  reviews(limit: Int, offset: Int, username: String): Reviews
  aggregated_rating: Float
  aggregated_rating_count: Int
  user_rating: Float
}

type Genre {
  _id: String
  id: Int
  name: String
}

type Platform {
  _id: String
  id: Int
  name: String
}

type Games {
  games: [Game]
  count: Int!
  filters: FiltersID
}

type FiltersID {
  genres: [Int]
  platforms: [Int]
}

type Filters {
  genres: [Genre]
  platforms: [Platform]
}

input ReviewInput {
  user: String
  title: String
  content: String
  rating: Int
  platform: String
  gameID: String
}

input UserInput {
  username: String
}
input GameSortInput {
  field: String
  order: String
}

type Query {
  getGame(ID: ID!): Game!
  getGenres(limit: Int): [Genre!]!
  getPlatforms(limit: Int): [Platform!]!
  search(
    userId: String
    query: String
    limit: Int!
    offset: Int!
    platforms: [Int]
    genres: [Int]
    sortBy: GameSortInput
    showFavorites: Boolean
    showReviewedGames: Boolean
  ): Games!
  getSearchSuggestions(query: String!): [Game!]!
}

type Mutation {
  createReview(reviewInput: ReviewInput): Review!
  signInOrCreateUser(userInput: UserInput): User!
  addFavorites(username: String!, gameID: String!): User!
  removeFavorites(username: String!, gameID: String!): User!
}
